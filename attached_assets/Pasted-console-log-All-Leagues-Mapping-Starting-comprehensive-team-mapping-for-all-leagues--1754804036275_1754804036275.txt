console.log('üåç [All Leagues Mapping] Starting comprehensive team mapping for all leagues...');
  
  // Start with comprehensive fallback league list immediately
  const comprehensiveLeagueList = [
    // Major European Leagues
    39, 140, 135, 78, 61, // Premier League, La Liga, Serie A, Bundesliga, Ligue 1
    
    // European Competitions
    2, 3, 848, 5, 4, 15, // Champions League, Europa League, Conference League, Nations League, Euro, World Cup
    
    // World Cup Qualifications
    32, 33, 34, 35, 36, 37, // Europe, Oceania, South America, Asia, Africa, Intercontinental
    
    // Youth and International Competitions
    38, 480, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
    
    // Continental Championships
    9, 10, 11, 1022, 772, 71, 531, 22, 72, 73, 75, 76, 233, 667, 940, 908, 1169, 23, 1077, 253, 850, 921, 130, 128, 493, 239, 265, 237, 235, 743,
    
    // Additional Major Leagues
    144, 179, 218, 119, 113, 203, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
    
    // More International Competitions
    201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 238, 240,
    
    // Additional Leagues from Around the World
    241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
    
    // American Leagues
    252, 262, 263, 274, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
    
    // Asian Leagues
    301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
    
    // African Leagues
    341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380
  ];
  
  try {
    // Try to fetch leagues from API first
    console.log('üì° [All Leagues Mapping] Attempting to fetch from /api/leagues...');
    
    const response = await fetch('/api/leagues/all', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        try {
          const leagues = await response.json();
          
          if (Array.isArray(leagues) && leagues.length > 0) {
            const apiLeagueIds = leagues
              .map((league: any) => league.league?.id || league.id)
              .filter((id: any) => typeof id === 'number' && id > 0);
            
            if (apiLeagueIds.length > 0) {
              console.log(`‚úÖ [All Leagues Mapping] Successfully fetched ${apiLeagueIds.length} leagues from API`);
              
              // Merge API leagues with comprehensive list (remove duplicates)
              const allUniqueLeagues = Array.from(new Set([...apiLeagueIds, ...comprehensiveLeagueList]));
              console.log(`üéØ [All Leagues Mapping] Total unique leagues: ${allUniqueLeagues.length}`);
              
              await generateAutomatedTeamMappingForLeagues(allUniqueLeagues);
              return;
            }
          }
        } catch (parseError) {
          console.warn('‚ö†Ô∏è [All Leagues Mapping] Failed to parse API response:', parseError);
        }
      } else {
        console.warn(`‚ö†Ô∏è [All Leagues Mapping] API returned non-JSON content: ${contentType}`);
      }
    } else {
      console.warn(`‚ö†Ô∏è [All Leagues Mapping] API request failed with status: ${response.status}`);
    }
    
  } catch (fetchError) {
    console.warn('‚ö†Ô∏è [All Leagues Mapping] Failed to fetch from API:', fetchError);
  }
  
  // Use comprehensive fallback list
  console.log('üîÑ [All Leagues Mapping] Using comprehensive fallback league list...');
  console.log(`üìã [All Leagues Mapping] Processing ${comprehensiveLeagueList.length} leagues from comprehensive list`);
  
  await generateAutomatedTeamMappingForLeagues(comprehensiveLeagueList);
}
