 switch (event.type?.toLowerCase()) {
      case "goal":
        if (event.detail?.toLowerCase().includes("penalty")) {
          return `Goal! ${homeTeamName} ${currentHomeScore}, ${awayTeamName} ${currentAwayScore}. ${playerName} (${teamName}) converts the penalty kick to the bottom right corner.`;
        } else if (assistName) {
          const shotTypes = ["header from very close range", "right footed shot from the centre of the box", "left footed shot from outside the box", "header from the left side of the six yard box", "right footed shot from the right side of the box"];
          const shotType = shotTypes[Math.floor(Math.random() * shotTypes.length)];
          const corners = ["bottom right corner", "bottom left corner", "top right corner", "top left corner", "centre of the goal"];
          const corner = corners[Math.floor(Math.random() * corners.length)];
          return `Goal! ${homeTeamName} ${currentHomeScore}, ${awayTeamName} ${currentAwayScore}. ${playerName} (${teamName}) ${shotType} to the ${corner}. Assisted by ${assistName}.`;
        } else {
          const shotTypes = ["header from very close range", "right footed shot from the centre of the box", "left footed shot from outside the box", "header from the left side of the six yard box", "right footed shot from the right side of the box"];
          const shotType = shotTypes[Math.floor(Math.random() * shotTypes.length)];
          const corners = ["bottom right corner", "bottom left corner", "top right corner", "top left corner", "centre of the goal"];
          const corner = corners[Math.floor(Math.random() * corners.length)];
          return `Goal! ${homeTeamName} ${currentHomeScore}, ${awayTeamName} ${currentAwayScore}. ${playerName} (${teamName}) ${shotType} to the ${corner}.`;
        }

      case "card":
        const cardType = event.detail?.toLowerCase().includes("yellow") ? "Yellow card" : "Red card";
        const cardReasons = ["unsporting behaviour", "dissent by word or action", "persistent fouling", "delaying the restart of play", "failure to respect the required distance", "entering or re-entering the field of play without the referee's permission"];
        const cardReason = cardReasons[Math.floor(Math.random() * cardReasons.length)];
        return `${cardType}, ${teamName}. ${playerName} is shown the ${cardType.toLowerCase()} for ${cardReason}.`;

      case "subst":
        if (assistName) {
          return `Substitution, ${teamName}. ${assistName} replaces ${playerName} because of tactical reasons.`;
        } else {
          return `Substitution, ${teamName}. ${playerName} comes on for tactical reasons.`;
        }

      case "var":
        return `VAR Review: ${event.detail || "Decision under review"} - ${teamName}. The referee is checking a potential incident.`;

      case "foul":
        const foulTypes = ["holding", "pushing", "tripping", "kicking", "jumping into"];
        const foulType = foulTypes[Math.floor(Math.random() * foulTypes.length)];
        return `Foul by ${playerName} (${teamName}). ${playerName} commits a foul for ${foulType} an opponent.`;

      case "freekick":
        const freeKickAreas = ["in the attacking half", "in the defensive half", "on the right wing", "on the left wing", "in a dangerous position"];
        const freeKickArea = freeKickAreas[Math.floor(Math.random() * freeKickAreas.length)];
        return `${playerName} (${teamName}) wins a free kick ${freeKickArea}.`;

      case "offside":
        return `Offside, ${teamName}. ${playerName} is caught offside and the flag is raised by the assistant referee.`;

      case "corner":
        return `Corner, ${teamName}. Conceded by ${assistName || "a defender"} after the ball goes out of play.`;

      case "attempt":
        if (event.detail?.toLowerCase().includes("saved")) {
          const saveTypes = ["brilliant save", "comfortable save", "diving save", "reflex save", "easy save"];
          const saveType = saveTypes[Math.floor(Math.random() * saveTypes.length)];
          return `Attempt saved. ${playerName} (${teamName}) shot is saved by the goalkeeper with a ${saveType}.`;
        } else if (event.detail?.toLowerCase().includes("missed")) {
          const missTypes = ["goes wide", "goes over the bar", "hits the post", "hits the crossbar"];
          const missType = missTypes[Math.floor(Math.random() * missTypes.length)];
          return `Attempt missed. ${playerName} (${teamName}) shot ${missType} from close range.`;
        } else if (event.detail?.toLowerCase().includes("blocked")) {
          return `Attempt blocked. ${playerName} (${teamName}) shot is blocked by a defender in the penalty area.`;
        } else {
          const attemptTypes = ["a shot", "a header", "a volley", "a curled effort", "a powerful drive"];
          const attemptType = attemptTypes[Math.floor(Math.random() * attemptTypes.length)];
          return `${playerName} (${teamName}) attempts ${attemptType} from outside the penalty area.`;
        }

      case "delay":
        const delayReasons = ["due to an injury", "due to a VAR check", "due to crowd trouble", "due to weather conditions"];
        const delayReason = event.detail || delayReasons[Math.floor(Math.random() * delayReasons.length)];
        return `Delay in match ${delayReason}. The referee has stopped play temporarily.`;

      case "injury":
        return `Delay in match because of an injury to ${playerName} (${teamName}). Medical staff are attending to the player.`;

      default:
        if (event.comments) {
          return event.comments;
        }
        // Enhanced default case to handle more event types
        if (event.detail?.toLowerCase().includes("foul")) {
          return `Foul by ${playerName} (${teamName}). The referee awards a free kick to the opposing team.`;
        } else if (event.detail?.toLowerCase().includes("free kick")) {
          return `${playerName} (${teamName}) wins a free kick in a promising position.`;
        } else if (event.detail?.toLowerCase().includes("offside")) {
          return `Offside, ${teamName}. ${playerName} is caught offside by the assistant referee.`;
        } else if (event.detail?.toLowerCase().includes("corner")) {
          return `Corner kick awarded to ${teamName}. The ball went out of play off a defending player.`;
        } else if (event.detail?.toLowerCase().includes("attempt")) {
          return `${playerName} (${teamName}) ${event.detail} but fails to find the target.`;
        } else {
          return `${event.detail || event.type} involving ${playerName} from ${teamName}.`;
        }
    }
  };
