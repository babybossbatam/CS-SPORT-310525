
/**
 * Automated Mapping Processor
 * Automatically processes and integrates team mappings generated by the automated system
 */

import { smartTeamTranslation } from './smartTeamTranslation';

export class AutomatedMappingProcessor {
  
  /**
   * Process automated team mapping data and integrate it into the smart translation system
   */
  static processAutomatedMappings(automatedData: string): void {
    try {
      console.log('üîÑ [Automated Processor] Processing automated team mappings...');
      
      // Parse the automated mapping code to extract team translations
      const teamMappings = this.parseAutomatedMappingCode(automatedData);
      
      if (Object.keys(teamMappings).length > 0) {
        // Bulk update the smart translation system
        smartTeamTranslation.bulkUpdateFromAutomatedMappings(teamMappings);
        
        console.log(`‚úÖ [Automated Processor] Successfully processed ${Object.keys(teamMappings).length} team mappings`);
        
        // Store the processed data for future use
        localStorage.setItem('processedAutomatedMappings', JSON.stringify({
          processedAt: new Date().toISOString(),
          totalTeams: Object.keys(teamMappings).length,
          mappings: teamMappings
        }));
        
        // Trigger cache refresh for immediate effect
        smartTeamTranslation.clearCache();
        
      } else {
        console.warn('‚ö†Ô∏è [Automated Processor] No valid team mappings found in automated data');
      }
      
    } catch (error) {
      console.error('‚ùå [Automated Processor] Failed to process automated mappings:', error);
    }
  }
  
  /**
   * Parse automated mapping code to extract team translation objects
   */
  private static parseAutomatedMappingCode(code: string): Record<string, any> {
    const mappings: Record<string, any> = {};
    
    try {
      // Extract team mapping objects using regex
      const teamMappingRegex = /'([^']+)':\s*\{[^}]*'zh':\s*'([^']*)'[^}]*'zh-hk':\s*'([^']*)'[^}]*'zh-tw':\s*'([^']*)'[^}]*'es':\s*'([^']*)'[^}]*'de':\s*'([^']*)'[^}]*'it':\s*'([^']*)'[^}]*'pt':\s*'([^']*)'/g;
      
      let match;
      while ((match = teamMappingRegex.exec(code)) !== null) {
        const [, teamName, zh, zhHk, zhTw, es, de, it, pt] = match;
        
        mappings[teamName] = {
          'zh': zh,
          'zh-hk': zhHk,
          'zh-tw': zhTw,
          'es': es,
          'de': de,
          'it': it,
          'pt': pt
        };
      }
      
      console.log(`üìä [Automated Processor] Extracted ${Object.keys(mappings).length} team mappings from code`);
      
    } catch (error) {
      console.error('‚ùå [Automated Processor] Failed to parse mapping code:', error);
    }
    
    return mappings;
  }
  
  /**
   * Check if automated mappings need to be updated
   */
  static needsUpdate(): boolean {
    try {
      const lastProcessed = localStorage.getItem('processedAutomatedMappings');
      const automatedData = localStorage.getItem('automatedTeamMapping');
      
      if (!lastProcessed || !automatedData) {
        return true;
      }
      
      const processed = JSON.parse(lastProcessed);
      const automated = JSON.parse(automatedData);
      
      // Check if automated data is newer than processed data
      return new Date(automated.generatedAt) > new Date(processed.processedAt);
      
    } catch (error) {
      console.warn('‚ö†Ô∏è [Automated Processor] Error checking update status:', error);
      return true;
    }
  }
  
  /**
   * Auto-process mappings if needed
   */
  static autoProcess(): void {
    if (this.needsUpdate()) {
      const automatedData = localStorage.getItem('automatedTeamMapping');
      if (automatedData) {
        const data = JSON.parse(automatedData);
        if (data.code) {
          this.processAutomatedMappings(data.code);
        }
      }
    }
  }
}

// Make it available globally for easy access
if (typeof window !== 'undefined') {
  (window as any).AutomatedMappingProcessor = AutomatedMappingProcessor;
  
  // Auto-process on page load
  document.addEventListener('DOMContentLoaded', () => {
    AutomatedMappingProcessor.autoProcess();
  });
}
